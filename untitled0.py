# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ueMjrQKPEFxVao5xP20sZBVjXduTtKI4
"""

def distance_robot(x,y,z):
  liste = sorted((x,y,z));
  limite_bas = 0.5*liste[1];
  limite_haut = 1.5*liste[1];

  if liste[0]>= limite_bas and liste[2]<=limite_haut:
    return ((x+y+z)/3);

  if liste[0]<= limite_bas and liste[2]<= limite_haut:
    return ((liste[1]+liste[2])/2);

  if liste[0]>= limite_bas and liste[2]>= limite_haut:
    return ((liste[1]+liste[0])/2);

  else :
    return(-1);

print(distance_robot(5,5,5));

def cout_deplacement(x1,y1,x2,y2,type):
  distance = ((x2 - x1)**2 + (y2-y1)**2)**0.5 ;

  if type == 'R' :
    return(distance);

  if type == 'H' :
    return(distance*1.5);

  if type == 'S' :
    return(distance*2);

  if type == 'O' :
    return(distance*3);

  else :
    return ('erreur');

def temps_trajet(x1,y1,x2,y2,type):
  distance = ((x2 - x1)**2 + (y2-y1)**2)**0.5 ;

  if type == 'R' :
    return(distance/2);

  if type == 'H' :
    return(distance/1.5);

  if type == 'S' :
    return(distance);

  if type == 'O' :
    return(distance/0.5);

  else :
    return ('erreur');

print(cout_deplacement(0,0,3,4,'O'))
print(temps_trajet(1,1,4,5,'R'))

class Position:

  def __init__(self,x = 0,y = 0):
    self.x = x
    self.y = y

  def __add__(self, autre):
    return( Position(self.x + autre.x,self.y + autre.y));

  def afficher(self):
    print(f"Position(x={self.x},y={self.y})");

  def distance_vers(self,autre):
    return (((autre.x - self.x)**2 + (autre.y-self.y)**2)**0.5);


pos1 = Position(0,0)
pos1.afficher() # Position(x=0, y=0)
pos2 = Position(3, 4)
pos2.afficher() # Position(x=3, y=4)
pos3 = pos1 + pos2
pos3.afficher() # Position(x=3, y=4)

print(pos1.distance_vers(pos2));

class Robot() :

  def __init__(self,x=0,y=0):
    self.x=x
    self.y=y

  def avancer_droite(self,x):
    self.x = self.x + x;

  def avancer_haut(self,y):
    self.y = self.y + y;

  def afficher(self):
    print(f"Robot à position Position(x={self.x}, y={self.y})");



obot = Robot()
robot.afficher()
robot.avancer_droite(3)
robot.avancer_haut(4)
robot.afficher()

class Robot() :

  def __init__(self,pos = Position(0,0)):
    self.pos = pos

  def avancer_droite(self,x):
    self.pos.x = self.pos.x + x

  def avancer_haut(self,y):
    self.pos.y = self.pos.y + y

  def afficher(self):
    print(f"Robot à position Position(x={self.pos.x}, y={self.pos.y})")

  def distance_vers_robot(self,autre):
    return self.pos.distance_vers(autre.pos)

  def aller_vers(self,autre):
    self.pos = autre



robot1 = Robot(Position(0, 0))
robot2 = Robot(Position(3, 4))
print(robot1.distance_vers_robot(robot2))
robot1.afficher()
robot1.aller_vers(Position(2, 3))
robot1.afficher()

class Cible :
  def __init__(self,pos : Position,nom : str):
    self.pos = pos
    self.nom = nom

  def est_atteinte_par(self, robot : Robot):
    return self.pos.x == robot.pos.x and self.pos.y == robot.pos.y

  def distance_depuis(self,robot : Robot):
    return self.pos.distance_vers(robot.pos)

  def afficher(self):
    print(f"Cible {self.nom} Position(x={self.pos.x}, y={self.pos.y})")


cible = Cible(Position(5, 3), "Sortie")
robot = Robot(Position(0, 3))
print(cible.est_atteinte_par(robot))
print(cible.distance_depuis(robot))
cible.afficher()

class Parcours:
  def __init__(self,liste = ()):
    self.liste = liste

  def  ajouter_cible(self, cible : Cible,nom : str):
    self.liste.append(cible)

parcours = Parcours()
parcours.ajouter_cible(Cible(Position(2, 0), "Point A"))
parcours.ajouter_cible(Cible(Position(2, 3), "Point B"))
parcours.ajouter_cible(Cible(Position(5, 3), "Point C"))